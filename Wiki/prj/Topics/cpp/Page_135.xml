<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Kot" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Принципы ООП</title>
  <body>
    <header>
      <para style="margin-bottom:2px; margin-left:4px;"><anchor id="hdr" styleclass="Heading1"></anchor><text style="font-family:Verdana; font-size:10pt; font-weight:bold; color:#000000;" translate="true">Принципы ООП</text></para>
    </header>
    <para><table rowcount="1" colcount="1" style="width:100%; cell-padding:1px; cell-spacing:0px; page-break-inside:auto; border-width:0px; border-spacing:0px; cell-border-width:0px; border-style:none; background-color:#99ccff; head-row-background-color:none; alt-row-background-color:none;">
      <tr style="vertical-align:top">
        <td style="vertical-align:middle;">
          <para><anchor id="hdr" style="font-family:Arial; font-size:10pt; color:#000000;"></anchor><text style="font-family:Verdana; font-size:8pt; font-style:italic; color:#000000;" translate="true">C++ Бъерн Страуструп</text></para>
        </td>
      </tr>
    </table></para>
    <para style="text-align:center; margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:14pt; font-weight:bold; color:#4c525d;" translate="true">Принципы ооп: инкапсуляция, наследование, полиморфизм, и абстракция данных.</text></para>
    <para style="margin-top:3px; margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:14pt; font-weight:bold; color:#4c525d;" translate="true">&#32;</text></para>
    <para style="margin-top:7px; margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:11pt; color:#333333;" translate="true">Объектно ориентированное программирование(ООП)…</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text styleclass="Normal" style="font-family:&apos;Trebuchet MS&apos;; font-size:15pt; vertical-align:baseline; color:#333333;" translate="true">Что это?</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:11pt; color:#333333;" translate="true">Из названия понятно, что это программирование, ориентированное на объекты.</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text styleclass="Normal" style="font-family:&apos;Trebuchet MS&apos;; font-size:15pt; vertical-align:baseline; color:#333333;" translate="true">Что есть объект?</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:11pt; color:#333333;" translate="true">Да хоть что! Все можно воспринимать как объект: стакан — объект, ложка в стакане — опять же объект, и даже ложка со стаканом так же может восприниматься как объект.</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:11pt; color:#333333;" translate="true">И чем же тогда нам может помочь понятие, включающее в себя всё? Ведь, говоря, что «всё — объект», мы лишаем уникальности любое подмножество этого «всего». Впринципе, так и есть: мы обезличиваем вещи, делаем их проще. Зачем? Да чтобы проще было с ними работать!</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text styleclass="Normal" style="font-family:&apos;Trebuchet MS&apos;; font-size:15pt; vertical-align:baseline; color:#333333;" translate="true">Чем же этот поход к программированию хорош?</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:11pt; color:#333333;" translate="true">Тем, что такой подход наибоее близок к человеческому пониманию. Представьте, что я бы сказал, что стакан — это множество значений, таких как «высота», «ширина», «длина» и «объём». Такого представления стакана нам хватит, чтобы написать программу, подбирающую упаковку для стакана (размеры упаковки) + мы могли бы сделать возможность выбора (для пользователя) «какого объёма ему нужна тара». Впринципе, для интернет-магазина этого уже может и хватает… Итого, нам потребовалось 4 сущности для описания такой вещи как стакан. Мы их удерживали в голове как отдельные вещи… Думаю, не стоит Вам объяснять, что держать в голове 4 вещи сложнее, чем одну (стакан), пусть даже и подразумевая, что у него есть какие-то параметры…</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:11pt; color:#333333;" translate="true">Что мы сделали, собрав воедино высоту, длину, ширину и объём? Мы абстрагировались от них на новый уровень абстракции(извините за тавтологию) – «стакан», мы инкапсулировали 4 сущности в одну! «Абстракция данных» и «инкапсуляция» являются одними из принципов ООП.</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:11pt; color:#333333;" translate="true">Хм… стакан — это, конечно, хорошо, но вот наш интернет-магазин набрал обороты, и наши покупатели не довольны, что у нас стаканы не различаются по цвету… Мы можем сказать «O’key, ща напишу новую абстракцию ‘цветной стакан’», но делать это «с нуля» глупо, лучше использовать наработки из «предыдущей серии». И вот мы берём наш старый тип абстракции «стакан» и, основываясь на нём, создаём новый, но с дополнительным пунктиком – «цвет». Но делаем это не банальным переписованием, а говорим «нам, пожалуйста, тип абстракции, основанный воооон на том, но с новым пунктом ‘цвет’». И у нас готов новый класс, как бы наследующий от предыдущего все качества. Этот принцип называется «наследование». Мы получили «ребёнка»(потомка) от родительского типа «стакан»(предок), который унаследовал все плохие и хорошие качества отца</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:11pt; color:#333333;" translate="true">Отлично! Теперь у нас есть механизм создания сложных иерархий(родов). Причём каждый следуйщий в роду наследует все качества предыдущего и добавляет некоторые свои… А вдруг унаследовалось что-то «плохое»(ненужное), или нам просто показалось, что в этом поколении какое-то свойство должно выполняться по-другому… Например, всё тот же тип «стакан», был у него метод(действие над ним) «запаковаться», где он брал свои габариты, выбирал коробку из какой-то базы и командовал «запаковать» вот в эту коробочку…</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:11pt; color:#333333;" translate="true">Но пришли новогодние праздники и вы создали «стакан новогодний подарочный», наследуясь от «цветного стакана» (ну, вы помните, абзацем ранее мы его создали), а «цветной стакан» унаследовал метод упаковки от обычного стакана. Но нам то нужен не обычный способ! Всё-таки праздники! Мы, конечно, можем создать новый метод «упаковать празднично», а тот (предположим его звали «упаковать») оставить «на память» об эволюционном процессе (подобно копчику)… Но такой подход до добра не доведёт: ну ладно, 1 копчик… а представьте 10 Так что надо что-то делать! И тут нам ООП предлагает «полиморфизм» – это когда одному названию соответствует несколько вещей. В нашем случае — одному методу «упаковать» мы сопоставим 2 команды. То есть переопределим в нашем новогоднем типе этот метод по-своему (сбантиками и блёстками)… И никаких копчиков!</text></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"></para>
    <para style="margin-left:79px; line-height:1.91; background-color:#e8e9eb;"><text style="font-family:&apos;Trebuchet MS&apos;; font-size:11pt; color:#333333;" translate="true">И что же мы в итоге получили: абстракцию данных, инкапсуляцию, наследование и полиморфизм. Вот четыре принципа ООП, которые облегчают нам задачу проектирования сложных конструкций. А программирование с учётом этих четырёх принципов — и есть ООП.</text></para>
    <para styleclass="Normal"><line style="height:1px; color:#999999;" /></para>
    <para styleclass="Normal" style="margin-top:10px; margin-bottom:6px; line-height:1.0; page-break-after:auto; tabstops:none;"><text styleclass="Normal" style="font-family:Verdana; font-size:8pt; font-style:italic; vertical-align:baseline; color:#000000;" translate="true"> Copyright ©2011 </text><text styleclass="Normal" style="font-family:Verdana; font-size:8pt; font-style:italic; vertical-align:baseline; color:#0000ff;" translate="true">C++</text><text styleclass="Normal" style="font-family:Verdana; font-size:8pt; font-style:italic; vertical-align:baseline; color:#000000;" translate="true">. All Rights Reserved.</text></para>
  </body>
</topic>
